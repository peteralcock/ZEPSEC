# frozen_string_literal: true

module Vulnerability::Ransackers
  extend ActiveSupport::Concern
  include RansackerDatetimeCast

  included do
    ransacker :custom_codenames_str do
      Arel.sql("ARRAY_TO_STRING(vulnerabilities.custom_codenames, ' ')")
    end

    ransacker :published_str do
      RansackerDatetimeCast.datetime_field_to_text_search(
        'vulnerabilities',
        'published',
        :reverse
      )
    end

    ransacker :modified_str do
      RansackerDatetimeCast.datetime_field_to_text_search(
        'vulnerabilities',
        'modified',
        :reverse
      )
    end

    ransacker :vendors_str do
      Arel.sql("ARRAY_TO_STRING(ARRAY_CAT(vulnerabilities.vendors, vulnerabilities.custom_vendors), ' ')")
    end

    ransacker :products_str do
      Arel.sql("ARRAY_TO_STRING(vulnerabilities.products || vulnerabilities.custom_products, ' ')")
    end

    ransacker :description_str do
      Arel.sql("ARRAY_TO_STRING(vulnerabilities.description, ' ')")
    end

    ransacker :state_str do
      field_transformation = <<~SQL
        CASE vulnerabilities.state
        WHEN 'modified'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.states.modified')}'
        WHEN 'published'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.states.published')}'
        END
      SQL
      Arel.sql(field_transformation)
    end

    ransacker :feed_str do
      field_transformation = <<~SQL
        CASE vulnerabilities.feed
        WHEN 'custom'
        THEN '#{Vulnerability.human_enum_name(:feed, 'custom')}'
        WHEN 'nvd'
        THEN '#{Vulnerability.human_enum_name(:feed, 'nvd')}'
        END
      SQL
      Arel.sql(field_transformation)
    end

    ransacker :actuality_str do
      field_transformation = <<~SQL
        CASE vulnerabilities.custom_actuality
        WHEN 'actual'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.actualities.actual')}'
        WHEN 'not_actual'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.actualities.not_actual')}'
        WHEN 'not_set'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.actualities.not_set')}'
        END
      SQL
      Arel.sql(field_transformation)
    end

    ransacker :custom_exploit_maturity_str do
      field_transformation = <<~SQL
        CASE vulnerabilities.custom_exploit_maturity
        WHEN 'not_defined'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.exploit_maturities.not_defined')}'
        WHEN 'high'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.exploit_maturities.high')}'
        WHEN 'functional'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.exploit_maturities.functional')}'
        WHEN 'poc'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.exploit_maturities.poc')}'
        ELSE '#{I18n.t('activerecord.attributes.vulnerability.exploit_maturities.unproven')}'
        END
      SQL
      Arel.sql(field_transformation)
    end

    ransacker :relevance_str do
      field_transformation = <<~SQL
        CASE vulnerabilities.custom_relevance
        WHEN 'relevant'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.relevances.relevant')}'
        WHEN 'not_relevant'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.relevances.not_relevant')}'
        WHEN 'not_set'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.relevances.not_set')}'
        END
      SQL
      Arel.sql(field_transformation)
    end

    ransacker :cvss do
      Arel.sql("COALESCE(vulnerabilities.cvss3, vulnerabilities.cvss2, vulnerabilities.custom_cvss3, 0)")
    end

    ransacker :cvss_vector do
      Arel.sql("COALESCE(vulnerabilities.cvss3_vector, vulnerabilities.cvss2_vector, vulnerabilities.custom_cvss3_vector, '')")
    end

    ransacker :cvss_vector do
      Arel.sql("COALESCE(vulnerabilities.cvss3_vector, vulnerabilities.cvss2_vector, vulnerabilities.custom_cvss3_vector, '')")
    end

    # TODO: use or delete
    ransacker :some_exploit_maturity do
      Arel.sql("COALESCE(vulnerabilities.exploit_maturity, vulnerabilities.custom_exploit_maturity)")
    end
  end
end
