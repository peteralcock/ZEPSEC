# frozen_string_literal: true

class VulnerabilityBulletin < ApplicationRecord
  include OrganizationMember
  include Linkable
  include Tagable
  include Attachable
  include VulnerabilityBulletin::Ransackers
  include CustomFieldable
  include Monitorable
  include Deliverable
  include Readable
  include StripTextFields
  include Publicable

  before_validation :set_name

  validates :name, length: { in: 3..200, allow_blank: true }
  validates :codename, length: { in: 3..200 }
  validates :codename, uniqueness: true
  validates :vulnerability_bulletin_kind_id, numericality: { only_integer: true }
  validates :vulnerability_bulletin_status_id, numericality: { only_integer: true, allow_blank: true}
  #validates :organization_id, numericality: { only_integer: true }

  belongs_to :organization
  belongs_to :vulnerability_bulletin_kind
  belongs_to :vulnerability_bulletin_status, optional: true

  has_many :vulnerability_bulletin_members, dependent: :delete_all
  has_many :vulnerabilities, through: :vulnerability_bulletin_members

  def delivery_subject_codename
    codename
  end

  def report
    nil
  end

  def report
    report = Reports.report_by_name(:vulnerability_bulletin_report)
    file = report.new(User.find(1), :docx, {vulnerability_bulletin_id: id})
      .rendered_file
    {file: file, name: "#{report.human_name}.docx"}
  end

  private

  def set_name
    return if name.present?
    self.name = vulnerability_bulletin_kind&.name
  end
end
