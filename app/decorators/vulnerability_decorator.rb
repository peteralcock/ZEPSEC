# frozen_string_literal: true

class VulnerabilityDecorator < SimpleDelegator
  def self.wrap(collection)
    collection.map do |obj|
      new obj
    end
  end

  def show_changed_fields(options = {})
    return '' if changed_fields.blank?
    options[:separator] ||= ', '
    changed_fields.map do |f|
      Vulnerability.human_attribute_name(f)
    end.join("#{options[:separator]}")
  end

  def previous_version(field)
    old_record = versions.last.reify
    return unless old_record
    old_record.send(field.to_sym)
  end

  def show_custom_codenames
    return '' unless custom_codenames.present?
    custom_codenames.join(', ')
  end

  def show_bulletins_string
    vulnerability_bulletins.each_with_object([]){ |b, o| o << b.codename }
      .join(', ')
  end

  def show_bulletin_counts
    vulnerability_bulletins.size
  end

  def first_bulletin
    vulnerability_bulletins&.first
  end

  def show_link_nvd_codename
    "https://nvd.nist.gov/vuln/search/results?form_type=Basic&results_type=overview&query=#{codename}&search_type=all"
  end

  def show_feed
    Vulnerability.human_enum_name(:feeds, feed)
  end

  def show_state
    Vulnerability.human_enum_name(:states, state)
  end

  def show_processed
    processed ? I18n.t('labels.yes_label') : I18n.t('labels.no_label')
  end

  def show_blocked
    if blocked
      I18n.t('activerecord.attributes.vulnerability.created.automatic')
    else
      I18n.t('activerecord.attributes.vulnerability.created.manual')
    end
  end

  def show_actuality
    Vulnerability.human_enum_name(:actuality, actuality)
  end

  def show_relevance
    Vulnerability.human_enum_name(:relevance, relevance)
  end

  def show_custom_actuality
    Vulnerability.human_enum_name(:custom_actuality, custom_actuality)
  end

  def show_custom_relevance
    Vulnerability.human_enum_name(:custom_relevance, custom_relevance)
  end

  def show_vendors
    vendors.join(', ')
  end

  def show_products
    products.join(', ')
  end

  def show_all_vendors
    (vendors + custom_vendors).join(', ')
  end

  def show_all_products
    (products + custom_products).join(', ')
  end

  def show_custom_vendors
    custom_vendors.join(', ')
  end

  def show_custom_products
    custom_products.join(', ')
  end

  def show_vendors_text
    vendors.join("\n")
  end

  def show_products_text
    products.join("\n")
  end

  def show_custom_vendors_text
    custom_vendors.join("\n")
  end

  def show_custom_products_text
    custom_products.join("\n")
  end

  def show_cwe
    cwe.join(', ')
  end

  def show_cpe_array
    return '' if raw_data == '{}'
    result = raw_data.dig('configurations', 'nodes')
    result.blank? ? '' : result
  end

  def show_cvss
    return "#{cvss3} (v3)" if cvss3.present?
    return "#{cvss2} (v2)" if cvss2.present?
    return "#{custom_cvss3} (v3*)" if custom_cvss3.present?
    ''
  end

  def show_cvss_num
    return cvss3 if cvss3.present?
    return cvss2 if cvss2.present?
    return custom_cvss3 if custom_cvss3.present?
    0
  end

  def show_criticality
    return cvss3_criticality if cvss3
    return cvss2_criticality if cvss2
    return custom_cvss3_criticality if custom_cvss3
    ''
  end

  def show_custom_criticality
    return custom_cvss3_criticality if custom_cvss3
    ''
  end

  def show_full_cvss
    "#{show_criticality} #{show_cvss}"
  end

  def show_cvss_av
    vector = cvss3_vector || cvss2_vector || custom_cvss3_vector
    return '' unless vector
    case vector
    when /AV:L/
      I18n.t("activerecord.attributes.vulnerability.cvss_avs.local")
    when /AV:A/
      I18n.t("activerecord.attributes.vulnerability.cvss_avs.adjacent_network")
    when /AV:N/
      I18n.t("activerecord.attributes.vulnerability.cvss_avs.network")
    when /AV:P/
      I18n.t("activerecord.attributes.vulnerability.cvss_avs.physical")
    else
      ''
    end
  end

  def show_cvss_av_network?
    vector = cvss3_vector || cvss2_vector || custom_cvss3_vector
    return false unless vector
    case vector
    when /AV:A/
      true
    when /AV:N/
      true
    else
      false
    end
  end

  def show_cvss_vector
    return "#{cvss3_vector} (v3)" if cvss3_vector.present?
    return "#{cvss2_vector} (v2)" if cvss2_vector.present?
    return "#{custom_cvss3_vector} (v3*)" if custom_cvss3_vector.present?
    ''
  end

  def show_exploitability
    return "#{cvss3_exploitability} (v3)" if cvss3_exploitability.present?
    return "#{cvss2_exploitability} (v2)" if cvss2_exploitability.present?
    return "#{custom_cvss3_exploitability} (v3*)" if custom_cvss3_exploitability.present?
    ''
  end

  def show_impact
    return "#{cvss3_impact} (v3)" if cvss3_impact.present?
    return "#{cvss2_impact} (v2)" if cvss2_impact.present?
    return "#{custom_cvss3_impact} (v3*)" if custom_cvss3_impact.present?
    ''
  end

  def show_versions_by_products_hash
    NvdBase::Parser.versions_by_products(raw_data)
  end

  def show_versions_by_products_text
    return '' if raw_data == '{}'
    NvdBase::Parser.versions_by_products(raw_data)
                   .each_with_object([]) do |(vendor, product_hash), memo|
      result_str = "#{vendor}"
      product_hash.each do |product, versions|
        result_str += "\n  #{product} "
        result_str += versions.select{ |version| version != '*'}.uniq.join(', ')
      end
      memo << result_str
    end.join("\n")
  end

  def show_description_string(options = {})
    options[:separator] ||= ', '
    description.join("#{options[:separator]}")
  end

  def show_references_string(options = {})
    return '' if raw_data == '{}'
    options[:separator] ||= ', '
    references_arr = raw_data.dig('cve', 'references', 'reference_data') || []
    references = references_arr.each_with_object([]) do |reference, arr|
      arr << reference.fetch('url', '')
    end
    limit = options.dig(:limit)
    if limit
      references.take(limit).join("#{options[:separator]}")
    else
      references.join("#{options[:separator]}")
    end
  end

  # TODO: use or delete
  def show_some_exploit_maturity
    if custom_exploit_maturity.present?
      return human_exploit_maturity(custom_exploit_maturity)
    elsif exploit_maturity.present?
      return human_exploit_maturity(exploit_maturity)
    end
    ''
  end

  def show_exploit_maturity
      human_exploit_maturity(exploit_maturity)
  end

  def show_custom_exploit_maturity
      human_exploit_maturity(custom_exploit_maturity)
  end


  def show_creator
    creator&.name || ''
  end

  def show_updater
    updater&.name || ''
  end

  def show_vulnerability_kind_name
    vulnerability_kind&.name || ''
  end

  private

  def yes_or_no(value)
    value ? I18n.t('labels.yes_label') : I18n.t('labels.no_label')
  end

  def custom_cvss3_criticality
    calculate_cvss3_criticality(custom_cvss3)
  end

  def cvss3_criticality
    calculate_cvss3_criticality(cvss3)
  end

  def calculate_cvss3_criticality(cvss)
    case
    when cvss == 0.0
      I18n.t('labels.vulnerability.none')
    when cvss < 3.9
      I18n.t('labels.vulnerability.low')
    when cvss < 6.9
      I18n.t('labels.vulnerability.medium')
    when cvss < 8.9
      I18n.t('labels.vulnerability.high')
    else
      I18n.t('labels.vulnerability.critical')
    end
  end

  def cvss2_criticality
    case
    when cvss2 < 3.9
      I18n.t('labels.vulnerability.low')
    when cvss2 < 6.9
      I18n.t('labels.vulnerability.medium')
    else
      I18n.t('labels.vulnerability.high')
    end
  end

  def human_exploit_maturity(maturity)
    Vulnerability.human_enum_name(:exploit_maturity, maturity)
  end
end
