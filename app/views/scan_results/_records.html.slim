= report_button_for records, organization_id: @organization.id
- q_params = params.permit(q: {}).to_h[:q]&.reject do |_k, v|
  - if v.respond_to?(:all?)
    - v.all?(&:blank?)
  - else
    - v.blank?
= command_button_for(records,
  organization_id: @organization.id,
  q: q_params)
= render 'search_form' if %w[index search].include?(params[:action])
= render 'download_search_form' if %w[index search].include?(params[:action])
br
- if %w[index search].include?(params[:action])
  = render('search_filters/user_search_filters',
    search_filters: @search_filters,
    records: records)
= index_for records, decorator: ScanResultDecorator, actions: false do |t|
  - t.header attribute: :job_start, sort_by: :start, sort: :desc
  - t.header attribute: :finished, sort_by: :finished, sort: :desc
  - t.header attribute: :organization_id, sort_by: :organization_name, sort: :desc
  - t.header attribute: :scan_job_id, sort_by: :scan_job_name, sort: :desc
  - t.header attribute: :scan_engine, sort_by: :scan_engine, sort: :desc
  - t.header attribute: :ip, sort_by: :ip, sort: :desc
  - t.header attribute: :protocol, sort_by: :protocol, sort: :desc
  - t.header attribute: :port, sort_by: :port, sort: :desc
  - t.header attribute: :state, sort_by: :state, sort: :desc
  - t.header attribute: :vulners, sort_by: :vulners, sort: :desc
  - t.header label: t('labels.current_legality')
  - t.header attribute: :legality, sort_by: :legality, sort: :desc
  - t.header attribute: :service, sort_by: :service, sort: :desc
  - t.header attribute: :product, sort_by: :product, sort: :desc
  - t.header attribute: :product_version, sort_by: :product_version, sort: :desc
  - t.header attribute: :product_extrainfo, sort_by: :product_extrainfo, sort: :desc
  - t.field do |record|
    = link_to show_date_time(record.job_start), record
  - t.field do |record|
    = link_to show_date_time(record.finished), record
  - t.field { |record| link_to record.organization.name, record.organization }
  - t.field { |record| link_to record.scan_job.name, record.scan_job }
  - t.field { |record| link_to record.scan_engine, record.scan_engine}
  - t.field do |record|
    = link_to new_host_path(ip: record.ip, organization_id: @organization.id), data: { toggle: 'tooltip', placement: 'top'}, title: t('views.action.new_host') do
      span.text-success
        =< fa_icon 'sitemap'
    =< link_to record.ip, record
    =< link_to "https://www.shodan.io/search?query=#{record.ip}" do
      span.text-info
        =< fa_icon 'info'
  - t.field do |record|
    = link_to record.protocol, record
  - t.field do |record|
    = link_to new_host_service_path(ip: record.ip, port_number: record.port, protocol_name: record.protocol, service: record.service, organization_id: @organization.id, vulnerable: record.vulners.present?, vuln_description: record.show_vulners_names), data: { toggle: 'tooltip', placement: 'top'}, title: t('views.action.new_host_service') do
      span.text-success
        =< fa_icon 'sun-o'
    =< link_to record.port, record
  - t.field do |record|
    span style="color:#{record.state_color}"
      => fa_icon 'star'
    = link_to record.show_state, record
  - t.field do |record|
    - if record.vulners.present?
      span.text-danger
        => fa_icon 'flash'
      = link_to record.show_vulners.truncate(20), record
  - t.field do |record|
    = port_current_legality(record)
    - if record.host_service&.host_service_status
      =< "(#{[record.host_service&.host_service_status&.name, record.host_service&.host_service_status_prop].reject(&:blank?).join('/')})"
  - t.field do |record|
    = port_legality(record)
  - t.field do |record|
    = link_to record.show_service, record
  - t.field do |record|
    = link_to record.show_product, record
  - t.field do |record|
    = link_to record.show_product_version, record
  - t.field do |record|
    = link_to record.show_product_extrainfo.truncate(20), record
